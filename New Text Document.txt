from __future__ import print_function
import time
from sr.robot import *

a_th = 2.0
""" float: Threshold for the control of the linear distance"""

d_th = 0.49
""" float: Threshold for the control of the orientation"""

silver = True
""" boolean: Variable for letting the robot know if it has to look for a silver or golden marker"""

R = Robot()
""" instance of the class Robot"""

def drive(speed, seconds):
    """
    Function for setting a linear velocity
    
    Args:
        speed (int): The speed of the wheels.
        seconds (int): The time interval.
    """
    R.motors[0].m0.power = speed
    R.motors[0].m1.power = speed
    time.sleep(seconds)
    R.motors[0].m0.power = 0
    R.motors[0].m1.power = 0

def turn(speed, seconds):
    """
    Function for setting an angular velocity
    
    Args:
        speed (int): The speed of the wheels.
        seconds (int): The time interval.
    """
    R.motors[0].m0.power = speed
    R.motors[0].m1.power = -speed
    time.sleep(seconds)
    R.motors[0].m0.power = 0
    R.motors[0].m1.power = 0

def find_silver_token():
    """
    Function to find the silver token
    
    Returns:
        dist (float): Distance of the closest silver token (-1 if no silver token is detected).
        rot_y (float): Angle between the robot and the silver token (-1 if no silver token is detected).
        code (int): Code of the closest silver token (-1 if no silver token is detected).
    """
    dist = 100
    for token in R.see():
        if token.dist < dist and token.info.marker_type is MARKER_TOKEN_SILVER and not(token in silver_list):
            dist = token.dist
            code = token.info.code
            rot_y = token.rot_y
    if dist == 100:
        return -1, -1, -1
    else:
        return dist, rot_y, code

def find_golden_token():
    """
    Function to find the golden token
    
    Returns:
        dist (float): Distance of the closest golden token (-1 if no golden token is detected).
        rot_y (float): Angle between the robot and the golden token (-1 if no golden token is detected).
        code (int): Code of the closest golden token (-1 if no golden token is detected).
    """
    dist = 100
    for token in R.see():
        if token.dist < dist and token.info.marker_type is MARKER_TOKEN_GOLD and not(token in gold_list):
            dist = token.dist
            code = token.info.code
            rot_y = token.rot_y
    if dist == 100:
        return -1, -1, -1
    else:
        return dist, rot_y, code

grab = False
""" boolean: Flag to differentiate the cycle for grabbing a silver token or releasing close to a golden token """

gold_list = []
""" list: List to keep track of the already grabbed golden tokens """

silver_list = []
""" list: List to keep track of the already sorted golden tokens with a silver token """

while 1:
    if silver == True:
        # Look for a silver token
        dist, rot_y, code_silver = find_silver_token()
        if code_silver in silver_list:
            # Turn if the token is already in the silver_list
            turn(+10, 0.1)
    else:
        # Look for a golden token
        dist, rot_y, code = find_golden_token()
        if code in gold_list:
            # Turn if the token is already in the gold_list
            turn(10, 0.1)
    if dist == -1:
        # No token is detected
        print("I don't see any token!!")
        turn(+10, 0.4)
    elif dist <= d_th:
        # Close to the token
        print("Found it!")
        if not grab and find_silver_token():
            # Grab a silver token if not already grabbed
            R.grab()
            silver_list.append(code_silver)
            print("Silver token caught!")
            dist, rot_y, code = find_golden_token()
            grab = True
            silver = not silver
        else:
            # Release a golden token
            R.release()
            gold_list.append(code)
            print("Yes")
            drive(-80, 0.25)
            turn(60, 1)
            grab = False
            silver = True
    elif -a_th <= rot_y <= a_th:
        # Well aligned with the token, go forward
        print("Ah, that'll do.")
        drive(80, 0.3)
    elif rot_y < -a_th:
        # Not well aligned, move left
        print("Left a bit...")
        turn(-5, 0.1)
    elif rot_y > a_th:
        # Not well aligned, move right
        print("Right a bit...")
        turn(+5, 0.1)
